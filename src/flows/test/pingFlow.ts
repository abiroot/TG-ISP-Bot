import { addKeyword } from '@builderbot/bot'
import type { BotContext, TFlow } from '@builderbot/bot/dist/types'
import { TelegramProvider } from '@builderbot-plugins/telegram'
import type { PostgreSQLAdapter as Database } from '@builderbot/database-postgres'
import { createFlowLogger } from '~/utils/logger'

const logger = createFlowLogger('ping')

/**
 * Ping Flow - Test interactive messages
 *
 * This flow demonstrates different message types:
 * - Simple text response
 * - Multiple messages
 * - Dynamic responses
 * - Number-based menu (Telegram-friendly alternative to buttons)
 */
export const pingFlow: TFlow<TelegramProvider, Database> = addKeyword<TelegramProvider, Database>(['ping', '/ping'])
    .addAnswer('üèì Pong!')
    .addAnswer([
        '‚úÖ Bot is working correctly!',
        '',
        'üìä System Status:',
        '- Database: Connected',
        '- Telegram: Active',
        '- Server: Running',
    ])
    .addAction(async (ctx: BotContext, { flowDynamic }) => {
        logger.info({ from: ctx.from }, 'Ping command received')

        const timestamp = new Date().toLocaleString('en-US', {
            timeZone: 'Asia/Beirut',
            dateStyle: 'medium',
            timeStyle: 'medium',
        })

        await flowDynamic(`‚è∞ Server Time: ${timestamp}`)

        // Demonstrate a simple "button-like" response with numbered options
        await flowDynamic([
            '',
            'üìã Quick Actions:',
            '1Ô∏è‚É£ Check Status',
            '2Ô∏è‚É£ View Help',
            '3Ô∏è‚É£ Contact Support',
            '',
            'Reply with a number to continue...',
        ])
    })
    .addAnswer(
        'Which option would you like?',
        { capture: true },
        async (ctx: BotContext, { flowDynamic, fallBack }) => {
            const option = ctx.body.trim()

            switch (option) {
                case '1':
                case '1Ô∏è‚É£':
                    await flowDynamic('‚úÖ All systems operational!')
                    break
                case '2':
                case '2Ô∏è‚É£':
                    await flowDynamic('üìö Help: Type "help" to see available commands')
                    break
                case '3':
                case '3Ô∏è‚É£':
                    await flowDynamic('üìû Support: Contact us via admin commands')
                    break
                default:
                    await flowDynamic('‚ùå Invalid option. Please reply with 1, 2, or 3')
                    return fallBack()
            }

            logger.info({ from: ctx.from, option }, 'Ping option selected')
        }
    )
